{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","textMode","href","title","id","aria-current","type","role","onClick","toggleMode","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","textColor","fontSize","details","value","onChange","e","console","log","target","rows","backgroundColor","t","toUpperCase","showAlert","disabled","length","toLowerCase","copy","document","getElementById","s","substring","sNo","parseInt","alert","toString","navigator","clipboard","writeText","arr","split","join","filter","element","defaultProps","Alert","word","height","charAt","slice","message","App","setMode","_useState3","_useState4","setAlert","setTimeout","body","components_Alert","components_Textform","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.de86fbdc.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    \r\n    <nav className={`navbar bg-${props.mode} px-4 navbar-expand-lg` } >\r\n  <div className=\"container-fluid\" >\r\n    {/* <Link className={`navbar-brand  text-${props.textMode}`}  to=\"/\" >{props.title}</Link> */}\r\n    <a className={`navbar-brand  text-${props.textMode}`}  href=\"/\" >{props.title}</a>\r\n    \r\n<div className={`collapse navbar-collapse`} id=\"navbarSupportedContent\">\r\n      <ul className={`navbar-nav me-auto mb-2 mb-lg-0`}>\r\n        <li className=\"nav-item\">\r\n\r\n          {/* <Link className={`nav-link active text-${props.textMode}`} aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className={`nav-link active text-${props.textMode}`} aria-current=\"page\" to=\"/about\">About</Link> */}\r\n{/* same thing written below but using a tag instead of Link tag(removed router dom) */}\r\n\r\n          <a className={`nav-link active text-${props.textMode}`} aria-current=\"page\" href=\"/\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className={`nav-link active text-${props.textMode}`} aria-current=\"page\" href=\"/about\">About</a>\r\n\r\n        </li> */}\r\n      </ul>\r\n      \r\n    <div className=\"form-check form-switch\">\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n  <label className={`form-check-label text-${props.textMode}`} htmlFor=\"flexSwitchCheckDefault \">Enable {props.textMode} mode</label>\r\n</div>\r\n  </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\nNavbar.defaultProps={\r\n    title:\"Enter title\",\r\n}\r\nNavbar.propTypes={\r\n    title : PropTypes.string\r\n};","import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nfunction Textform(props) {\r\n    const[text,setText] = useState(\"Type something here\")\r\n\r\n    const writing=(e)=>{\r\n        console.log(\"changing text\");\r\n        setText(e.target.value);\r\n    }\r\n\r\n\r\n    const upperCase=(e)=>{\r\n        let t=text.toUpperCase();\r\n        setText(t);\r\n        console.log(\"uppercase clicked\");\r\n        props.showAlert('success','Converted to uppercase')\r\n      \r\n    }\r\n    const lowerCase=(e)=>{\r\n        let t=text.toLowerCase();\r\n        setText(t);\r\n        console.log(\"lowercase clicked\");\r\n        props.showAlert('success','Converted to lowercase')\r\n    }\r\n    const clear=()=>{\r\n        console.log(\"clear button clicked\");\r\n        props.showAlert('success','Text cleared')\r\n        setText(\"\");\r\n    }\r\n    const copyClipboard=()=>{\r\n        navigator.clipboard.writeText(text);\r\n        props.showAlert('success','Copied to clipboard')\r\n    }\r\n    const increaseFont=()=>{\r\n        let copy=document.getElementById('exampleFormControlTextarea1');\r\n        let s=copy.style.fontSize.substring(0,2);\r\n        let sNo=parseInt(s);\r\n        if(s<=55){\r\n            sNo+=3;\r\n        }\r\n        else{\r\n            alert(\"Max font size reached\");\r\n        }\r\n        s=sNo.toString()+\"px\";\r\n        console.log(s+\" \"+typeof(s));\r\n        copy.style.fontSize=s;\r\n    }\r\n    const decreaseFont=()=>{\r\n        let copy=document.getElementById('exampleFormControlTextarea1');\r\n        let s=copy.style.fontSize.substring(0,2);\r\n        let sNo=parseInt(s);\r\n        if(s>=13){\r\n            sNo-=3;\r\n        }\r\n        else{\r\n            alert(\"Max font size reached\");\r\n        }\r\n        s=sNo.toString()+\"px\";\r\n        console.log(s+\" \"+typeof(s));\r\n        copy.style.fontSize=s;\r\n    }\r\n    const format=()=>{\r\n        let arr=text.split(/[ ]+/);\r\n        console.log(arr);\r\n        setText(arr.join(\" \"));\r\n    }\r\n    \r\n  return (\r\n    <>\r\n    <div>\r\n        <div className=\"container my-6\" >\r\n            <div className=\"mb-2\" style={{color:`${props.textColor}`}}>\r\n            <label htmlFor=\"exampleFormControlTextarea1\" style={{fontSize:\"25px\"}} className=\"form-label\">{props.details}</label>\r\n            <textarea className={`form-control`} value={text} onChange={writing} id=\"exampleFormControlTextarea1\" rows=\"3\" style={{fontSize:\"20px\" ,backgroundColor:`${props.mode==='light'?\"white\":\"\trgb(208,208,208)\"}`}}></textarea>\r\n            <div className=\"container my-2\" >\r\n            <button type=\"button\" onClick={upperCase} className=\"btn btn-info  my-2 mx-1\" disabled={(text.length===0)}>UpperCase</button>\r\n            <button type=\"button\" onClick={lowerCase} className=\"btn btn-info  mx-1 my-2\" disabled={(text.length===0)}>LowerCase</button>\r\n            <button type=\"button\" onClick={clear} className=\"btn btn-info my-2 mx-1\" disabled={(text.length===0)}>Clear</button>\r\n            <button type=\"button\" onClick={increaseFont} className=\"btn btn-info  mx-1 my-2\" disabled={(text.length===0)}>Increase Font</button>\r\n            <button type=\"button\" onClick={copyClipboard} className=\"btn btn-info my-2 mx-1\" disabled={(text.length===0)}>Copy to clipboard</button>\r\n            <button type=\"button\" onClick={decreaseFont} className=\"btn btn-info  mx-1 my-2\" disabled={(text.length===0)}>Decrease Font</button>\r\n            <button type=\"button\" onClick={format} className=\"btn btn-info my-2 mx-1 \" disabled={(text.length===0)}>Clear Extra space</button>\r\n            </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div className=\"container\" style={{color:props.textColor}}>\r\n        <h2>Your text summary</h2>\r\n        <p>{text.split(/\\s/).filter((element)=>{return element.length!==0}).length} Words and {text.length} Characters</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>=1?text:'Nothing to preview'}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nTextform.propTypes = {\r\n    details: PropTypes.string\r\n}\r\nTextform.defaultProps={\r\n    details:\"Enter anything\"\r\n}\r\n\r\nexport default Textform","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capatalize=(word)=>{\r\n        word=word.toLowerCase();\r\n        return word.charAt(0).toUpperCase()+word.slice(1);\r\n    }\r\n  return (\r\n    <>\r\n    <div style={{height:'45px'}}>\r\n    {props.alert && <div >\r\n    <div className={`alert alert-${props.alert.type} pt-1`} role=\"alert\" style={{height:'40px'}}>\r\n        <strong>{capatalize(props.alert.type)} </strong>\r\n         : {props.alert.message}\r\n    </div>\r\n    </div>}\r\n\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Alert","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Textform from './components/Textform';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport About from './components/About';\n// import {\n//   BrowserRouter as Router,\n//   Routes as Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  \n  //for Navbar\n  const[mode,setMode]=useState(\"light\");\n  const textMode=`${mode==='dark'?'light':'dark'}`;\n  const textColor=`${mode==='dark'?'white':'black'}`;\n  \n  const toggleMode=()=>{\n    console.log('toogle');\n    if(mode==='dark'){\n      showAlert('success','Light mode enabled');\n      setMode('light');\n      document.body.style.backgroundColor=\"white\";\n    }\n    else{\n      document.body.style.backgroundColor=\"rgb(70, 62, 94)\";\n      setMode('dark');\n      showAlert('success','Dark mode enabled');\n    }\n  }\n  //\n  //For Alert\n  const [alert,setAlert]=useState(null);\n\n  const showAlert=(type,message)=>{\n    setAlert({\n      type:type,\n      message:message\n\n    })\n    //timeOut to remove alert\n    setTimeout(() => {\n      setAlert(null);\n    }, 700);\n\n  }\n\n\n  return (\n    <>\n\n\n    {/* <Router> */}\n    <Navbar title={\"Welcome to Text Editor\"} mode={mode} toggleMode={toggleMode} textMode={textMode}\n     ></Navbar>\n    <Alert alert={alert}/>\n      {/* <Switch> */}\n        {/* <Route exact path=\"/\" element={<Textform details={\"Enter text to analize\"}  textColor={textColor} mode={mode} showAlert={showAlert} />}></Route> */}\n        {/* instead of above line write below line */}\n        {/* <Route exact path=\"/about\" element={<About/>}></Route> */}\n        \n        <Textform details={\"Enter text to analize\"}  textColor={textColor} mode={mode} showAlert={showAlert} />\n      {/* </Switch> */}\n    {/* </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}